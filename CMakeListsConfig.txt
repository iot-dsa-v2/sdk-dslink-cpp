
if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    set(MACOSX TRUE)
endif ()

if (CMAKE_COMPILER_IS_GNUCC AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 5.1)
    set(CMAKE_CXX_STANDARD 14)
elseif (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    set(CMAKE_CXX_STANDARD 14)
else()
    set(CMAKE_CXX_STANDARD 11)
endif ()

set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_DSA_DEBUG -fPIC")

if (CMAKE_COMPILER_IS_GNUCC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror=return-type -Wno-deprecated")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Werror=return-type -Wno-deprecated")

    if (MINGW)

    else()
        set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address")
        set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fstack-protector-all")
    endif()
endif()

#set(PROJECT_SOURCE_DIR ${CMAKE_CURRENT_LIST_DIR})
if (NOT SDK_PROJECT_SOURCE_DIR)
    set(SDK_PROJECT_SOURCE_DIR ${CMAKE_CURRENT_LIST_DIR})
    set(SDK_PROJECT_INCLUDE_DIR ${SDK_PROJECT_SOURCE_DIR}/include)
    set(SDK_PROJECT_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})
endif ()


option(DSA_INCLUDE_BROKER "build dsa broker" ON)

option(DSA_INCLUDE_MODULE_PACK "Include set additional modules" OFF)

# DEPENDENCIES

# Boost 1.66.0
find_package(Boost 1.66 REQUIRED COMPONENTS system thread date_time program_options filesystem)
if (MINGW)
    # Boost doesn't include winsock libraries on MinGW platform
    set(Boost_LIBRARIES ${Boost_LIBRARIES} wsock32 ws2_32 mswsock)
endif()
include_directories(${Boost_INCLUDE_DIRS})

## OpenSSL v1.0.2n
if (MACOSX)
    set(OPENSSL_ROOT_DIR "/usr/local/Cellar/openssl/1.0.2n")
    set(OPENSSL_INCLUDE_DIR "/usr/local/Cellar/openssl/1.0.2n/include")
    set(OPENSSL_LIBRARIES "/usr/local/Cellar/openssl/1.0.2n/lib")
elseif (UNIX)
    set(OPENSSL_ROOT_DIR "/usr/local/ssl")
endif ()
find_package(OpenSSL REQUIRED)

if (UNIX)
set(OPENSSL_LIBRARIES ${OPENSSL_LIBRARIES} dl)
endif ()
include_directories(${OPENSSL_INCLUDE_DIR})

# GTEST
option(DSA_INCLUDE_TEST "build test and benchmarks" OFF)
if (DSA_INCLUDE_TEST)
if (UNIX)
    # Download and unpack googletest-download at configure time
    configure_file(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt.in ${CMAKE_BINARY_DIR}/test/lib/googletest-download/CMakeLists.txt)
    execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
            RESULT_VARIABLE result
            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/test/lib/googletest-download)
    if (result)
        message(FATAL_ERROR "CMake step for googletest failed: ${result}")
    endif ()
    execute_process(COMMAND ${CMAKE_COMMAND} --build .
            RESULT_VARIABLE result
            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/test/lib/googletest-download)
    if (result)
        message(FATAL_ERROR "Build step for googletest failed: ${result}")
    endif ()

    # Prevent overriding the parent project's compiler/linker
    # settings on Windows
    set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)

    # Add googletest-download directly to our build. This defines
    # the gtest and gtest_main targets.
    add_subdirectory(${CMAKE_BINARY_DIR}/test/lib/googletest-src
            ${CMAKE_BINARY_DIR}/test/lib/googletest-build)

    # The gtest/gtest_main targets carry header search path
    # dependencies automatically when using CMake 2.8.11 or
    # later. Otherwise we have to add them here ourselves.
    #if (CMAKE_VERSION VERSION_LESS 2.8.11)
    include_directories("${gtest_SOURCE_DIR}/include")
    #endif()

    set(GTEST_BOTH_LIBRARIES gtest_main gtest)
endif (UNIX)

if (WIN32)
    find_package(GTest REQUIRED)
    include_directories(${GTEST_INCLUDE_DIRS})
endif (WIN32)
    set(TEST_LIBS ${GTEST_BOTH_LIBRARIES})

endif(DSA_INCLUDE_TEST)